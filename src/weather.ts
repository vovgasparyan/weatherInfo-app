import axios from 'axios';
import dotenv from 'dotenv';
import { logger } from './logger';

dotenv.config();

const API_KEY = process.env.WEATHER_API_KEY;
const BASE_URL = 'http://api.weatherapi.com/v1/forecast.json';

export function escapeMarkdown(text: string): string {
    return text.replace(/([_*\[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

function getWeather(condition: string): string {
    const text = condition.toLowerCase();

    if (
        text.includes('sun') ||
        text.includes('—Å–æ–ª–Ω–µ—á–Ω–æ') ||
        text.includes('—Å–æ–Ω—è—á–Ω–æ') ||
        text.includes('soleado') ||
        text.includes('ensoleill√©') ||
        text.includes('soleggiato') ||
        text.includes('sonnig') ||
        text.includes('ensolarado')
    ) return '‚òÄÔ∏è';

    if (
        text.includes('partly') ||
        text.includes('–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è') ||
        text.includes('—á–∞—Å—Ç–∫–æ–≤–æ') ||
        text.includes('parcialmente') ||
        text.includes('partiellement') ||
        text.includes('parzialmente') ||
        text.includes('teilweise')
    ) return '‚õÖ';

    if (
        text.includes('cloud') ||
        text.includes('–æ–±–ª–∞—á–Ω–æ') ||
        text.includes('—Ö–º–∞—Ä–Ω–æ') ||
        text.includes('nublado') ||
        text.includes('nuageux') ||
        text.includes('nuvoloso') ||
        text.includes('wolkig')
    ) return '‚òÅÔ∏è';

    if (
        text.includes('rain') ||
        text.includes('–¥–æ–∂–¥') ||
        text.includes('–¥–æ—â') ||
        text.includes('lluvia') ||
        text.includes('pluie') ||
        text.includes('pioggia') ||
        text.includes('regen')
    ) return 'üåßÔ∏è';

    if (
        text.includes('snow') ||
        text.includes('—Å–Ω–µ–≥') ||
        text.includes('—Å–Ω—ñ–≥') ||
        text.includes('nieve') ||
        text.includes('neige') ||
        text.includes('neve') ||
        text.includes('schnee')
    ) return '‚ùÑÔ∏è';

    if (
        text.includes('thunder') ||
        text.includes('–≥—Ä–æ–∑–∞') ||
        text.includes('–±—É—Ä—è') ||
        text.includes('tormenta') ||
        text.includes('orage') ||
        text.includes('temporale') ||
        text.includes('gewitter')
    ) return '‚õàÔ∏è';

    if (
        text.includes('fog') ||
        text.includes('—Ç—É–º–∞–Ω') ||
        text.includes('—ñ–º–ª–∞') ||
        text.includes('niebla') ||
        text.includes('brouillard') ||
        text.includes('nebbia') ||
        text.includes('nebel')
    ) return 'üå´Ô∏è';

    return 'üå°Ô∏è';
}

const texts: Record<string, any> = {
    en: {
        invalidCity: 'üö´ Invalid city name. Please enter only letters and spaces.',
        notFound: 'üö´ City not found. Please make sure the name is entered correctly.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî ${days}-day forecast:\n\n`,
        avg: 'Average',
        high: 'üî∫',
        low: 'üîª',
    },
    ru: {
        invalidCity: 'üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.',
        notFound: 'üö´ –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${days} –¥–Ω—è:\n\n`,
        avg: '–°—Ä–µ–¥–Ω—è—è',
        high: 'üî∫',
        low: 'üîª',
    },
    uk: {
        invalidCity: 'üö´ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞. –í–≤–æ–¥—å—Ç–µ –ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏.',
        notFound: 'üö´ –ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ ${days} –¥–Ω—ñ:\n\n`,
        avg: '–°–µ—Ä–µ–¥–Ω—è',
        high: 'üî∫',
        low: 'üîª',
    },
    es: {
        invalidCity: 'üö´ Nombre de ciudad no v√°lido. Solo letras y espacios.',
        notFound: 'üö´ Ciudad no encontrada. Verifica el nombre.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî previsi√≥n de ${days} d√≠as:\n\n`,
        avg: 'Promedio',
        high: 'üî∫',
        low: 'üîª',
    },
    de: {
        invalidCity: 'üö´ Ung√ºltiger Stadtname. Bitte nur Buchstaben und Leerzeichen.',
        notFound: 'üö´ Stadt nicht gefunden. Bitte √ºberpr√ºfe den Namen.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî ${days}-Tage Vorhersage:\n\n`,
        avg: 'Durchschnitt',
        high: 'üî∫',
        low: 'üîª',
    },
    it: {
        invalidCity: 'üö´ Nome citt√† non valido. Inserisci solo lettere e spazi.',
        notFound: 'üö´ Citt√† non trovata. Controlla il nome.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî previsioni per ${days} giorni:\n\n`,
        avg: 'Media',
        high: 'üî∫',
        low: 'üîª',
    },
    fr: {
        invalidCity: 'üö´ Nom de ville invalide. Utilisez uniquement des lettres et des espaces.',
        notFound: 'üö´ Ville introuvable. V√©rifiez le nom.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî pr√©visions pour ${days} jours:\n\n`,
        avg: 'Moyenne',
        high: 'üî∫',
        low: 'üîª',
    },
    pt: {
        invalidCity: 'üö´ Nome de cidade inv√°lido. Apenas letras e espa√ßos.',
        notFound: 'üö´ Cidade n√£o encontrada. Verifique o nome.',
        forecast: (city: string, days: number) => `üìç *${city}* ‚Äî previs√£o para ${days} dias:\n\n`,
        avg: 'M√©dia',
        high: 'üî∫',
        low: 'üîª',
    },
};

export async function getWeatherForecast(city: string, lang: string = 'en'): Promise<string> {
    const validCityRegex = /^[\p{L}\s\-']+$/u;

    const t = texts[lang] || texts['en'];

    if (!validCityRegex.test(city)) {
        logger.error(`Invalid characters in city name: ${city}`);
        return t.invalidCity;
    }

    try {
        const response = await axios.get(BASE_URL, {
            params: {
                key: API_KEY,
                q: city,
                days: 4,
                lang,
                aqi: 'no',
                alerts: 'no'
            }
        });

        const localeMap: Record<string, string> = {
            en: 'en-US',
            ru: 'ru-RU',
            uk: 'uk-UA',
            es: 'es-ES',
            de: 'de-DE',
            it: 'it-IT',
            fr: 'fr-FR',
            pt: 'pt-PT',
        };

        const data = response.data;
        const location = data.location.name;
        const forecastDays = data.forecast.forecastday;
        let result = t.forecast(location, forecastDays.length);

        for (const day of forecastDays) {
            const locale = localeMap[lang] || 'en-US';

            const date = escapeMarkdown(
                new Date(day.date).toLocaleDateString(locale, {
                    weekday: 'long',
                    day: 'numeric',
                    month: 'long'
                })
            );

            const conditionText = escapeMarkdown(day.day.condition.text);
            const icon = getWeather(conditionText);
            const avgTemp = day.day.avgtemp_c;
            const maxTemp = day.day.maxtemp_c;
            const minTemp = day.day.mintemp_c;

            result += `üìÖ *${date}*\n${icon} ${conditionText}\nüå°Ô∏è ${t.avg}: ${avgTemp}¬∞C (${t.high} ${maxTemp}¬∞ / ${t.low} ${minTemp}¬∞)\n\n`;
        }

        return result.trim();
    } catch (error: any) {
        const errMsg = error.response?.data?.error?.message || error.message;
        logger.error(`Error from WeatherAPI: ${errMsg}`);
        return t.notFound;
    }
}